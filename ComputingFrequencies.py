def symbolToNumber(symbol):
    symDict = {"A":0,
               "C":1,
               "G":2,
               "T":3}
    return symDict[symbol]

def patternToNumber(pattern):
    if pattern is "":
        #last recursion
        return 0
    prefix = pattern[:-1]
    symbol = pattern[-1]
    return 4*patternToNumber(prefix)+symbolToNumber(symbol)

def ComputingFrequencies(text, k):
    frequencyArray = [0]*(4**k)
    #for i in range(4**k-1):
    #    frequencyArray[i] = 0
    for i in range(len(text)-k+1):
        pattern = text[i:i+k]
        j = patternToNumber(pattern)
        frequencyArray[j] += 1
    return frequencyArray

text = 'TTGAGAAGATCGTAAAGAATCTTCCCTGACGTTAGGCTGCGTTGAGTACCCAGAGAGTGTTACTAGCCCTGCCCCTCATTCACCTCAGCTAAAGAGGCCGTGCAAGGGATGTAGTGATTGATGATCAGTGAGCGAAATGTAAAATACCTGTTAAAGTACGATGGTACGAATACCATCTAGTAGAAGTAACGCCTCTCCGCATATCCGGCGCACACGCACTGGATTGTATATTAGACTATCTCAGTGTCAGGTCGGATGTCTTAGGTTGCTATCCGCGCCAGATTGCTCCTGCTATGTAGCAACATATGTATTGCCAATGTACCTGCATGAGGCTGCGTGGACAAGTGACGTTTCGTACCGAAGGTATCGGGGGCCAATGTCGTTAGATCTCGTTTCAAGCTTAAGGCGTGAAGGCGGTCCGGCTTCGCATCATGGTATTCCAAACCATGCCCTAGTACTTACGGGCTATGCAAAGTTTTTGGTATTCCTGCCTCATTCGGAGAGTCCGATGGAGCTAAAGGCCAGTAACGATGAGCGAATTTCTTCCCGTGCGTGTGCGGCTACAGGACCTGGGGAAATCAGTCGGTGGTCGATAAGGTGTCAACAGGCGCTGGCCACCACAGCAACTCAGATATTCAACCATCGCATGTTAGACAGGTTTTTCGCGTCCCCGCTGTTCACTATTAGCCCATTTTAACTATTGCTTGCCAACCCATCGGGAGGGCCAATTATCCGGGGTTAGATATAACTAGGGCGCGTGGTCATAAG'
print(ComputingFrequencies(text, 7))